//
// This script exports extended layer.bounds information to [psd_file_name].plist
//

function docCheck() {
    // ensure that there is at least one document open
    if (!documents.length) {
        alert('There are no documents open.');
        return; // quit
    }
}

docCheck();

var originalRulerUnits = preferences.rulerUnits;
preferences.rulerUnits = Units.PIXELS;

var docRef = activeDocument;

var docWidth = docRef.width.value;
var docHeight = docRef.height.value;
var mySourceFilePath = activeDocument.fullName.path + "/";

//  Code to get layer index / descriptor
//
cTID = function(s) { return app.charIDToTypeID(s); };
sTID = function(s) { return app.stringIDToTypeID(s); };
function getLayerDescriptor (doc, layer) {
    var ref = new ActionReference();
    ref.putEnumerated(cTID("Lyr "), cTID("Ordn"), cTID("Trgt"));
    return executeActionGet(ref)
};

function getLayerID(doc, layer) {
  var d = getLayerDescriptor(doc, layer);
  return d.getInteger(cTID('LyrI'));
};

var stackorder = 0;

// function from Xbytor to traverse all layers
traverseLayers = function(doc, ftn, reverse) {
  function _traverse(doc, layers, ftn, reverse) {
    var ok = true;
    for (var i = 1; i <= layers.length && ok != false; i++) {
      var index = (reverse == true) ? layers.length-i : i - 1;
      var layer = layers[index];

      if (layer.typename == "LayerSet") {
        ok = _traverse(doc, layer.layers, ftn, reverse);

      } else {
  stackorder = stackorder + 1;
        ok = ftn(doc, layer, stackorder);
      }
    }
    return ok;
  };

  return _traverse(doc, doc.layers, ftn, reverse);
};

// create a string to hold the data
var str ="";

// class using a contructor
function cLayer(doc, layer) {

var invertY = docHeight;

//this.layerID = Stdlib.getLayerID(doc, layer);
  this.layerID = getLayerID(doc, layer);
  //alert("layer ID: " + this.layerID);
	this.layerWidth = layer.bounds[2].value - layer.bounds[0].value;
      this.layerHeight = layer.bounds[3].value - layer.bounds[1].value;
  
	// these return object coordinates relative to canvas
      this.upperLeftX = layer.bounds[0].value;
      this.upperLeftY = layer.bounds[1].value;
      this.upperCenterX = this.layerWidth / 2 + layer.bounds[0].value;
      this.upperCenterY = layer.bounds[1].value;
      this.upperRightX = layer.bounds[2].value;
      this.upperRightY = layer.bounds[1].value;
      this.middleLeftX = layer.bounds[0].value;
      this.middleLeftY = this.layerHeight / 2 + layer.bounds[1].value;
      this.middleCenterX = this.layerWidth / 2 + layer.bounds[0].value;
      this.middleCenterY = this.layerHeight / 2 + layer.bounds[1].value;
      this.middleRightX = layer.bounds[2].value;
      this.middleRightY = this.layerHeight / 2 + layer.bounds[1].value;
      this.lowerLeftX = layer.bounds[0].value;
      this.lowerLeftY = layer.bounds[3].value;
      this.lowerCenterX = this.layerWidth / 2 + layer.bounds[0].value;
      this.lowerCenterY = layer.bounds[3].value;
      this.lowerRightX = layer.bounds[2].value;
      this.lowerRightY = layer.bounds[3].value;
	  
	  // I'm adding these for easier editing of flash symbol transformation point (outputs a 'x, y' format)
	  // because I like to assign shortcut keys that use the numeric pad keyboard, like such:
	  //		7	8	9
	  //		4	5	6
	  //		1	2	3
	  //
	  this.leftBottom = this.lowerLeftX + ", " + this.lowerLeftY;
	  this.bottomCenter = this.lowerCenterX + ", " + this.lowerCenterY;
	  this.rightBottom = this.lowerRightX + ", " + this.lowerRightY;
	  
	  this.leftCenter = this.middleLeftX + ", " + this.middleLeftY;
	  this.center = this.middleCenterX + "," + (invertY - this.middleCenterY);
	  this.rightCenter = this.middleRightX + ", " + this.middleRightY;
	  
	  this.leftTop = this.upperLeftX +  ", " + this.upperLeftY;
	  this.topCenter = this.upperCenterX + ", " + this.upperCenterY;
	  this.rightTop = this.upperRightX + ", " + this.upperRightY;

	// these return object coordinates relative to layer bounds
      this.relUpperLeftX = layer.bounds[1].value - layer.bounds[1].value;
      this.relUpperLeftY =  layer.bounds[0].value - layer.bounds[0].value;
      this.relUpperCenterX = this.layerWidth / 2;
      this.relUpperCenterY = layer.bounds[0].value - layer.bounds[0].value;
      this.relUpperRightX = this.layerWidth;
      this.relUpperRightY = layer.bounds[0].value - layer.bounds[0].value;
      this.relMiddleLeftX = layer.bounds[1].value - layer.bounds[1].value;
      this.relMiddleLeftY = this.layerHeight / 2;
	  
	  // Center X
      this.middleCenterX = this.layerWidth / 2 + layer.bounds[0].value;
	  this.middleCenterX = this.middleCenterX - docWidth/2;

	  // Center Y
      this.middleCenterY = docHeight + ((this.layerHeight / 2) - (layer.bounds[1].value)*(-1));
	  this.middleCenterY = this.middleCenterY - docHeight/2;	  
	  
      this.relMiddleRightX = this.layerWidth;
	  this.relMiddleRightY = this.layerHeight / 2;
      this.relLowerLeftX = layer.bounds[1].value - layer.bounds[1].value;
      this.relLowerLeftY = this.layerHeight;
      this.relLowerCenterX = this.layerWidth / 2;
   	  this.relLowerCenterY = this.layerHeight / 2;
      this.relLowerRightY = this.layerHeight;
      this.relLowerRightX = this.layerWidth;
      this.relLowerRightY = this.layerHeight;
  
  return this;
}

// add header line
str = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!DOCTYPE plist PUBLIC \"-\//Apple Computer\//DTD PLIST 1.0\//EN\" \"http:\//www.apple.com\/DTDs\/PropertyList-1.0.dtd\">\n" 
+ "<plist version=\"1.0\">\n<dict>\n\t<key>frames</key>\n\t<dict>\n";

// now a function to collect the data
function exportBounds(doc, layer, i) {
    var isVisible = layer.visible;
    var layerData = cLayer(doc, layer);
	
	// Check if layer name starts from prefix
	var layerNamePrefix = layer.name.substring(0,2);

  if(isVisible){
// Layer object main coordinates relative to its active pixels
    var str2 = "\n"
	
	+ "\t\t<key>" + layer.name + "_" + (i - 1) + "</key>\n"
	+ "\t\t<dict>\n"
	
	/////// Define type as string
	var type = "";
	
	////// Button
	if ( layer.name.substring(0,3) == "Btn")
	{
		type = 
		  "\t\t\t<key>Type</key>\n"
		+ "\t\t\t<string>Button</string>\n"
	}
	
	/////// RadioButton
	else if ( layer.name.substring(0,4) == "RBtn")
	{
		type = 
		  "\t\t\t<key>Type</key>\n"
		+ "\t\t\t<string>RadioButton</string>\n"
	}
	
	/////// Selector
	else if ( layer.name.substring(0,2) == "S_")
	{
		type = 
		  "\t\t\t<key>Type</key>\n"
		+ "\t\t\t<string>Selector</string>\n"
	}
	
	////// Slider
	else if ( layer.name.substring(0,3) == "Sl_")
	{
		type = 
		  "\t\t\t<key>Type</key>\n"
		+ "\t\t\t<string>Slider</string>\n"
	}
	
	////// ScrollView	
	else if ( layer.name.substring(0,4) == "Scrl")
	{
		type = 
		  "\t\t\t<key>Type</key>\n"
		+ "\t\t\t<string>ScrollView</string>\n"
	}
	
	////// Slot
	else if ( layer.name.substring(0,4) == "Slot")
	{
		type = 
		  "\t\t\t<key>Type</key>\n"
		+ "\t\t\t<string>Slot</string>\n"
	}
	
	////// Label
	else if (layerNamePrefix == "L_")
	{
		type = 
		  "\t\t\t<key>Type</key>\n"
		+ "\t\t\t<string>Label</string>\n"
	}
	
	////// Picture as default
	else
	{
	type = "\t\t\t<key>Type</key>\n"
	+ "\t\t\t<string>Picture</string>\n"
	}
	
	str2 += type;
	
	
	////////////////////////////////////
	
	str2 +=
	 "\t\t\t<key>ClipNames</key>\n"
	+ "\t\t\t<array>\n"
	
	///////////////// Apply Font Name
	if (layerNamePrefix == "L_")
	{
	str2 +=
	 "\t\t\t\t<string>Agent Orange</string>\n"
	}
	else
	{
	str2 +=
	 "\t\t\t\t<string>" + layer.name + ".png" +"</string>\n"
	}
	////////////////////////////////
	
	str2 +=
	 "\t\t\t</array>\n"
	+ "\t\t\t<key>Position</key>\n"
	+ "\t\t\t<string>{" + center + "}</string>\n"
	+ "\t\t\t<key>Sizes</key>\n"
	+ "\t\t\t<string>{" + layerData.layerWidth + ","+ layerData.layerHeight + "}</string>\n"  
	+ "\t\t\t<key>Scale</key>\n"
	+ "\t\t\t<string>{1.0,1.0}</string>\n"
	+ "\t\t\t<key>Rotation</key>\n"
	+ "\t\t\t<string>0</string>\n"
	+ "\t\t\t<key>zOrder</key>\n"
	+ "\t\t\t<string>" + (i - 1) + "</string>\n"
	+ "\t\t\t<key>TransformCenter</key>\n"
	+ "\t\t\t<string>{0.5,0.5}</string>\n"
	
	// Event and Value added
	+ "\t\t\t<key>Event</key>\n"
	+ "\t\t\t<string>functionName</string>\n"
	+ "\t\t\t<key>Value</key>\n"
	+ "\t\t\t<string>functionValue</string>\n"
	
	////// Special 
	+ "\t\t\t<key>Special</key>\n"
	+ "\t\t\t<dict>\n"
	
	////// Text Block
	if ( layerNamePrefix == "L_") 
	{
	str2 += 
	  "\t\t\t\t<key>Text</key>\n"
	+ "\t\t\t\t<string>Any Text</string>\n"
	+ "\t\t\t\t<key>TextSize</key>\n"
	+ "\t\t\t\t<string>20</string>\n"
	+ "\t\t\t\t<key>TextColor</key>\n"
	+ "\t\t\t\t<string>#000000</string>\n"
	+ "\t\t\t\t<key>TextAlignment</key>\n"
	+ "\t\t\t\t<string>Center</string>\n"
	} 	
	//////////////////////////
	
	
	//////// Scroll View Block
	
	if ( layer.name.substring(0,4) == "Scrl") 
	{
	str2 += 
	  "\t\t\t\t<key>NumWindows</key>\n"
	+ "\t\t\t\t<string>1</string>\n"
	+ "\t\t\t\t<key>Picker</key>\n"
	+ "\t\t\t\t<string>NO</string>\n"
	+ "\t\t\t\t<key>SlideSensivity</key>\n"
	+ "\t\t\t\t<string>35.0</string>\n"
	+ "\t\t\t\t<key>Slide Time</key>\n"
	+ "\t\t\t\t<string>0.5</string>\n"
	} 		
	
	//////////////////////////
	
	str2 +=
	"\t\t\t</dict>\n"
	
	+ "\t\t\t<key>Childs</key>\n"
	+ "\t\t\t<dict>\n"
	+ "\t\t\t</dict>\n"
	+ "\t\t\t<key>Animation</key>\n"
	+ "\t\t\t<dict>\n"
	+ "\t\t\t\t<key>Moving</key>\n"
	+ "\t\t\t\t<string>{0.0,0.0}</string>\n"
	+ "\t\t\t\t<key>Jumping</key>\n"
	+ "\t\t\t\t<string>0</string>\n"
	
	// Pulse Added
	+ "\t\t\t\t<key>PulseInterval</key>\n"
	+ "\t\t\t\t<string>0</string>\n"
	
	+ "\t\t\t</dict>\n"	
	+ "\t\t</dict>\n\n"
	
	//+ "\" position=\"" + center // this is the center position of layer
	//+ "\" layerwidth=\"" + layerData.layerWidth 
	//+ "\" layerheight=\"" + layerData.layerHeight 
	//+ "\" transformpoint=\"" + "center" + "\">" // hard-coding 'center' as the default transformation point
	//+ layer.name + ".png" + "</layer>\n" // I have to put some content here otherwise sometimes tags are ignored
str += str2.toString();
   };
};


// call X's function using the one above
traverseLayers(app.activeDocument, exportBounds, true);

// Use this to export XML file to same directory where PSD file is located
    var mySourceFilePath = activeDocument.fullName.path + "/";
// create a reference to a file for output
    var csvFile = new File(mySourceFilePath.toString().match(/([^\.]+)/)[1] + app.activeDocument.name.match(/([^\.]+)/)[1] + ".plist");
// open the file, write the data, then close the file
csvFile.open('w');

csvFile.writeln(str 
+ "\t</dict>\n\n" 
+ "\t<key>metadata</key>\t\n" 
+ "\t<dict>\n" 
+ "\t\t<key>Version</key>\n" 
+ "\t\t<string>1.0</string>\n"
+ "\t\t<key>atlasFileName</key>\n" 

//Array instead of string
+ "\t\t<array>\n" 
+ "\t\t\t<string>" + app.activeDocument.name.match(/([^\.]+)/)[1]  + "</string>\n" 
+ "\t\t</array>\n" 

+ "\t</dict>\n" 
+ "</dict>\n" 
+ "</plist>"
);

csvFile.close();
preferences.rulerUnits = originalRulerUnits;
// Confirm that operation has completed
alert("Operation Complete!" + "\n" + "Layer coordinates were successfully exported to:" + "\n" + "\n" + mySourceFilePath.toString().match(/([^\.]+)/)[1] + "c_" + app.activeDocument.name.match(/([^\.]+)/)[1] + ".plist");